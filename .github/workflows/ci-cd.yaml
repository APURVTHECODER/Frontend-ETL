name: Frontend CI/CD

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]
    
env:
  # --- Configuration - MUST MATCH your setup ---
  GCP_PROJECT_ID: crafty-tracker-457215-g6
  GAR_LOCATION: us-central1
  APP_REPO_NAME: app-images
  GKE_CLUSTER_NAME: cluster-1
  GKE_ZONE: us-central1-a
  GCP_WORKLOAD_IDENTITY_PROVIDER: 'projects/1076741205751/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider'
  GCP_SERVICE_ACCOUNT: 'github-actions-deployer@crafty-tracker-457215-g6.iam.gserviceaccount.com'
  BACKEND_REPO: APURVTHECODER/Backend-ETL

jobs:
  test:
    name: Run Frontend Lint/Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'                     # ← switch to npm cache
          cache-dependency-path: etl-bot/package-lock.json

      - name: Install Frontend Dependencies
        working-directory: etl-bot
        run: npm ci                      # ← use npm ci for reproducible installs

      # - name: Run Lint/Tests
      #   working-directory: etl-bot
      #   run: npm run lint                # ← your lint/test script in package.json

  build-and-push:
    name: Build and Push Frontend Image
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout Frontend Code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK & Docker Helper
        uses: google-github-actions/setup-gcloud@v2
      - run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Frontend Image with Secrets as Build Args
        uses: docker/build-push-action@v5
        with:
          context: ./etl-bot
          file: ./etl-bot/Dockerfile
          push: true
          tags: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.APP_REPO_NAME }}/frontend:${{ github.sha }}
          build-args: |
            VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}
            VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}
            VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
            APPID=${{ secrets.APPID }}
            MEASUREMENTID=${{ secrets.MEASUREMENTID }}
            MESSAGINGSENDERID=${{ secrets.MESSAGINGSENDERID }}
            PROJECTID=${{ secrets.PROJECTID }}
            STORAGEBUCKET=${{ secrets.STORAGEBUCKET }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy Frontend to GKE
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout Backend Repo (for k8s manifests)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.BACKEND_REPO }}
          token: ${{ secrets.CROSS_REPO_ACCESS_TOKEN }}
          ref: base64
          path: Backend-ETL

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK & Kubectl
        uses: google-github-actions/setup-gcloud@v2
      - run: gcloud components install gke-gcloud-auth-plugin --quiet

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials \
            "${{ env.GKE_CLUSTER_NAME }}" \
            --zone "${{ env.GKE_ZONE }}" \
            --project "${{ env.GCP_PROJECT_ID }}"

      - name: Substitute Frontend Image Tag
        run: |
          IMAGE_TAG=${{ github.sha }}
          MANIFEST_FILE=Backend-ETL/backend/k8s/frontend-deployment.yaml
          sed -i "s|\${GAR_LOCATION}-docker.pkg.dev/\${GCP_PROJECT_ID}/\${APP_REPO_NAME}/frontend:\${IMAGE_TAG}|${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.APP_REPO_NAME }}/frontend:${IMAGE_TAG}|g" "$MANIFEST_FILE"
          grep "image:" "$MANIFEST_FILE"

      - name: Apply Kubernetes Manifests
        run: |
          K8S_PATH="Backend-ETL/backend/k8s"
          kubectl apply -f $K8S_PATH/

      - name: Wait for Frontend Rollout
        run: |
          kubectl rollout status deployment/frontend-deployment --timeout=5m

      - name: Get Ingress IP
        id: ingress_ip
        run: |
          for i in {1..30}; do
            IP=$(kubectl get ingress app-ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null) || IP=""
            if [ -n "$IP" ]; then
              echo "ingress_ip=$IP" >> $GITHUB_OUTPUT
              exit 0
            fi
            sleep 10
          done

      - name: Output Deployed URL
        run: |
          if [ -n "${{ steps.ingress_ip.outputs.ingress_ip }}" ]; then
            echo "✅ Frontend available at http://${{ steps.ingress_ip.outputs.ingress_ip }}"
          else
            echo "⚠️ Frontend deployed but no ingress IP found."
          fi